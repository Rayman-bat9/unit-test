{
  "stats": {
    "suites": 5,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-06T10:06:15.846Z",
    "end": "2024-05-06T10:06:15.863Z",
    "duration": 17,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f50ee112-aa1d-44b4-b489-20ec9592c173",
      "title": "",
      "fullFile": "D:\\Projects\\unit-test-task\\test\\test.test.js",
      "file": "\\test\\test.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "68806253-a9a8-4b0f-8441-bc265dccfcd6",
          "title": "NumbersValidator",
          "fullFile": "D:\\Projects\\unit-test-task\\test\\test.test.js",
          "file": "\\test\\test.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "965085e2-f8f8-4e87-848e-ed5a7c1a229a",
              "title": "isNumberEven",
              "fullFile": "D:\\Projects\\unit-test-task\\test\\test.test.js",
              "file": "\\test\\test.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for even numbers",
                  "fullTitle": "NumbersValidator isNumberEven should return true for even numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nassert.strictEqual(validator.isNumberEven(2), true);\nassert.strictEqual(validator.isNumberEven(4), true);\nassert.strictEqual(validator.isNumberEven(0), true);",
                  "err": {},
                  "uuid": "b785cae7-283f-4cfc-9689-fb54ab2e2061",
                  "parentUUID": "965085e2-f8f8-4e87-848e-ed5a7c1a229a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for odd numbers",
                  "fullTitle": "NumbersValidator isNumberEven should return false for odd numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nassert.strictEqual(validator.isNumberEven(1), false);\nassert.strictEqual(validator.isNumberEven(3), false);\nassert.strictEqual(validator.isNumberEven(5), false);",
                  "err": {},
                  "uuid": "1868c78a-b71f-4994-9ce6-c3284e35b43e",
                  "parentUUID": "965085e2-f8f8-4e87-848e-ed5a7c1a229a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for non-number inputs",
                  "fullTitle": "NumbersValidator isNumberEven should throw an error for non-number inputs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nassert.throws(() => validator.isNumberEven('a'), /^Error: \\[a\\] is not of type \"Number\" it is of type \"string\"$/);",
                  "err": {},
                  "uuid": "c3122898-fef3-45ad-ad7d-0c296e6990dc",
                  "parentUUID": "965085e2-f8f8-4e87-848e-ed5a7c1a229a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b785cae7-283f-4cfc-9689-fb54ab2e2061",
                "1868c78a-b71f-4994-9ce6-c3284e35b43e",
                "c3122898-fef3-45ad-ad7d-0c296e6990dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "49c83f12-f4a9-4db3-b8dd-9c5383a5d442",
              "title": "getEvenNumbersFromArray",
              "fullFile": "D:\\Projects\\unit-test-task\\test\\test.test.js",
              "file": "\\test\\test.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of even numbers",
                  "fullTitle": "NumbersValidator getEvenNumbersFromArray should return an array of even numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nconst result = validator.getEvenNumbersFromArray([1, 2, 3, 4, 5]);\nassert.deepStrictEqual(result, [2, 4]);",
                  "err": {},
                  "uuid": "58c28ac4-b957-4e7e-bd1f-9d7aab6a7b37",
                  "parentUUID": "49c83f12-f4a9-4db3-b8dd-9c5383a5d442",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if any element in the array is not a number",
                  "fullTitle": "NumbersValidator getEvenNumbersFromArray should throw an error if any element in the array is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nassert.throws(() => validator.getEvenNumbersFromArray([1, 2, 'a']), /^Error: \\[1,2,a\\] is not an array of \"Numbers\"$/);",
                  "err": {},
                  "uuid": "45c88b8f-93c4-47ab-8e36-8568659567d1",
                  "parentUUID": "49c83f12-f4a9-4db3-b8dd-9c5383a5d442",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58c28ac4-b957-4e7e-bd1f-9d7aab6a7b37",
                "45c88b8f-93c4-47ab-8e36-8568659567d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd4b7fa6-ff37-4fb2-ad56-61a08b2a1728",
              "title": "isAllNumbers",
              "fullFile": "D:\\Projects\\unit-test-task\\test\\test.test.js",
              "file": "\\test\\test.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if all elements in the array are numbers",
                  "fullTitle": "NumbersValidator isAllNumbers should return true if all elements in the array are numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nconst result = validator.isAllNumbers([1, 2, 3, 4, 5]);\nassert.strictEqual(result, true);",
                  "err": {},
                  "uuid": "02f0189f-e4bd-4ec0-8242-3e1735bbe61f",
                  "parentUUID": "cd4b7fa6-ff37-4fb2-ad56-61a08b2a1728",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if any element in the array is not a number",
                  "fullTitle": "NumbersValidator isAllNumbers should return false if any element in the array is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nconst result = validator.isAllNumbers([1, 2, 'a', 4, 5]);\nassert.strictEqual(result, false);",
                  "err": {},
                  "uuid": "5fff7b9d-2430-4662-ac21-ff05988e8430",
                  "parentUUID": "cd4b7fa6-ff37-4fb2-ad56-61a08b2a1728",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for non-array inputs",
                  "fullTitle": "NumbersValidator isAllNumbers should throw an error for non-array inputs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nassert.throws(() => validator.isAllNumbers('a'), /^Error: \\[a\\] is not an array$/);",
                  "err": {},
                  "uuid": "3d728937-8b35-4f7a-9a79-74b3023e09a2",
                  "parentUUID": "cd4b7fa6-ff37-4fb2-ad56-61a08b2a1728",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02f0189f-e4bd-4ec0-8242-3e1735bbe61f",
                "5fff7b9d-2430-4662-ac21-ff05988e8430",
                "3d728937-8b35-4f7a-9a79-74b3023e09a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f463e31-2f91-4a97-adb0-d5514d386e5d",
              "title": "isInteger",
              "fullFile": "D:\\Projects\\unit-test-task\\test\\test.test.js",
              "file": "\\test\\test.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if the value is an integer",
                  "fullTitle": "NumbersValidator isInteger should return true if the value is an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nconst result = validator.isInteger(10);\nassert.strictEqual(result, true);",
                  "err": {},
                  "uuid": "78797f1b-25bb-4570-b636-c0ad16088ca5",
                  "parentUUID": "8f463e31-2f91-4a97-adb0-d5514d386e5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if the value is not an integer",
                  "fullTitle": "NumbersValidator isInteger should return false if the value is not an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nconst result = validator.isInteger(10.5);\nassert.strictEqual(result, false);",
                  "err": {},
                  "uuid": "d574bdba-0acd-4d4b-9940-29f36d043059",
                  "parentUUID": "8f463e31-2f91-4a97-adb0-d5514d386e5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for non-number inputs",
                  "fullTitle": "NumbersValidator isInteger should throw an error for non-number inputs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nassert.throws(() => validator.isInteger('a'), /^Error: \\[a\\] is not a number$/);",
                  "err": {},
                  "uuid": "c52a1f2b-2930-4519-999b-e383c078aa4b",
                  "parentUUID": "8f463e31-2f91-4a97-adb0-d5514d386e5d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78797f1b-25bb-4570-b636-c0ad16088ca5",
                "d574bdba-0acd-4d4b-9940-29f36d043059",
                "c52a1f2b-2930-4519-999b-e383c078aa4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}